#include <stdio.h>
#include <stdlib.h>
struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
};
struct TreeNode* createNode(int val) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->val = val;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}
int findIndex(int* inorder, int start, int end, int value) {
    for (int i = start; i <= end; i++) {
        if (inorder[i] == value) {
            return i;
        }
    }
    return -1;
}
struct TreeNode* buildTreeHelper(int* preorder, int* inorder, int start, int end, int* preIndex) {
    if (start > end) {
        return NULL;
    }
     int currentVal = preorder[*preIndex];
    (*preIndex)++;
        struct TreeNode* node = createNode(currentVal);
        if (start == end) {
        return node;
    }
     int inorderIndex = findIndex(inorder, start, end, currentVal);
    
    node->left = buildTreeHelper(preorder, inorder, start, inorderIndex - 1, preIndex);
    node->right = buildTreeHelper(preorder, inorder, inorderIndex + 1, end, preIndex);    
    return node;
}
struct TreeNode* buildTree(int* preorder, int* inorder, int size) {
    int preIndex = 0;
    return buildTreeHelper(preorder, inorder, 0, size - 1, &preIndex);
}
void printPreorder(struct TreeNode* root) {
    if (root == NULL) return;
    printf("%d ", root->val);
    printPreorder(root->left);
    printPreorder(root->right);
}
int main() {
    int preorder[] = {3, 9, 20, 15, 7};
    int inorder[] = {9, 3, 15, 20, 7};
    int size = sizeof(preorder) / sizeof(preorder[0]);
    struct TreeNode* root = buildTree(preorder, inorder, size);
    printf("Preorder traversal of the constructed tree: ");
    printPreorder(root);   
    return 0;
}
